{
    "docs": [
        {
            "location": "/",
            "text": "Mobile paymentSDK\n\u00b6\n\n\nIntroduction\n\u00b6\n\n\nMobile paymentSDK (MPSDK) is a lightweight user interface for the Wirecard Payment Gateway. MPSDK offers a seamless user experience by rendering a payment form as if it's built in the merchant\u2019s mobile application. \n\n\nThis documentation was written for developers who will be integrating MPSDK into their mobile application. On this page, you will find general information you need to get started. \n\n\nFor integration docs, refer to the subpage Basic Setup and Integration.\n\n\n\n\nIf you feel like something is missing, or you find errors, contact Sedlak, Stefan or Tall, Bruno\n\n\n\n\nA list of the currently supported payment methods can be found in Available Payment Methods below.\n\n\nFirst Steps\n\u00b6\n\n\nBefore you start coding, you are going to need some credentials:\n\n\n\n\nMerchant Account ID - the ID of your merchant account that will be used to process transactions\n\n\nSecret Key - a value that you will use to create unique security signatures for your transactions\n\n\n\n\n\n\nYou can find testing credentials at this link.\nYour account needs to be configured to process payments triggered by mobile SDKs through Merchant Support. \n\n\n\n\nYour own credentials are acquired by contacting Merchant Support.\n\n\nNext, depending on where you are from, you will need to choose your closest production environment: this is where your instance of MPSDK will be hosted. Both testing and production environments are available in every location.\n\n\nAt the moment, the supported locations are as follows:\n\n\n\n\n\n\n\n\nLocation / Name\n\n\nHostname\n\n\nSSL cert valid until\n\n\n\n\n\n\n\n\n\n\nGermany - PROD\n\n\napi.wirecard.com\n\n\n05/05/2018\n\n\n\n\n\n\nGermany - TEST\n\n\napi-test.wirecard.com\n\n\n05/05/2018\n\n\n\n\n\n\nSingapore - PROD\n\n\napi.wirecard.com.sg\n\n\n05/21/2020\n\n\n\n\n\n\nSingapore - TEST\n\n\ntest.wirecard.com.sg\n\n\n09/04/2020\n\n\n\n\n\n\nToronto - PROD\n\n\nengine.elastic-payments.com\n\n\n08/27/2018\n\n\n\n\n\n\nToronto - TEST\n\n\nsandbox-engine.thesolution.com\n\n\n12/01/2018\n\n\n\n\n\n\n\n\n\n\nDon't forget to keep MPSDK up-to-date (updating before the SSL certification expires especially).\n\n\n\n\nAvailable Payment Methods\n\u00b6\n\n\n\n\nWe recommend using IPNs, instead of the default MPSDK responses, as they are much more reliable\n\n\n\n\n\n\n\n\n\n\nPayment Method\n\n\nTransaction Type\n\n\n\n\n\n\n\n\n\n\nApple Pay\n\n\nauthorization\n\n\n\n\n\n\n\n\npurchase\n\n\n\n\n\n\nCard\n\n\nauthorization\n\n\n\n\n\n\n\n\nauthorization-only\n\n\n\n\n\n\n\n\npurchase\n\n\n\n\n\n\n\n\ntokenize\n\n\n\n\n\n\nPayPal\n\n\nauthorization\n\n\n\n\n\n\n\n\nauthorization-only\n\n\n\n\n\n\n\n\ndebit\n\n\n\n\n\n\nSEPA Direct Debit\n\n\nauthorization\n\n\n\n\n\n\n\n\npending-debit",
            "title": "Home"
        },
        {
            "location": "/#mobile-paymentsdk",
            "text": "",
            "title": "Mobile paymentSDK"
        },
        {
            "location": "/#introduction",
            "text": "Mobile paymentSDK (MPSDK) is a lightweight user interface for the Wirecard Payment Gateway. MPSDK offers a seamless user experience by rendering a payment form as if it's built in the merchant\u2019s mobile application.   This documentation was written for developers who will be integrating MPSDK into their mobile application. On this page, you will find general information you need to get started.   For integration docs, refer to the subpage Basic Setup and Integration.   If you feel like something is missing, or you find errors, contact Sedlak, Stefan or Tall, Bruno   A list of the currently supported payment methods can be found in Available Payment Methods below.",
            "title": "Introduction"
        },
        {
            "location": "/#first-steps",
            "text": "Before you start coding, you are going to need some credentials:   Merchant Account ID - the ID of your merchant account that will be used to process transactions  Secret Key - a value that you will use to create unique security signatures for your transactions    You can find testing credentials at this link.\nYour account needs to be configured to process payments triggered by mobile SDKs through Merchant Support.    Your own credentials are acquired by contacting Merchant Support.  Next, depending on where you are from, you will need to choose your closest production environment: this is where your instance of MPSDK will be hosted. Both testing and production environments are available in every location.  At the moment, the supported locations are as follows:     Location / Name  Hostname  SSL cert valid until      Germany - PROD  api.wirecard.com  05/05/2018    Germany - TEST  api-test.wirecard.com  05/05/2018    Singapore - PROD  api.wirecard.com.sg  05/21/2020    Singapore - TEST  test.wirecard.com.sg  09/04/2020    Toronto - PROD  engine.elastic-payments.com  08/27/2018    Toronto - TEST  sandbox-engine.thesolution.com  12/01/2018      Don't forget to keep MPSDK up-to-date (updating before the SSL certification expires especially).",
            "title": "First Steps"
        },
        {
            "location": "/#available-payment-methods",
            "text": "We recommend using IPNs, instead of the default MPSDK responses, as they are much more reliable      Payment Method  Transaction Type      Apple Pay  authorization     purchase    Card  authorization     authorization-only     purchase     tokenize    PayPal  authorization     authorization-only     debit    SEPA Direct Debit  authorization     pending-debit",
            "title": "Available Payment Methods"
        },
        {
            "location": "/tabtest/",
            "text": "Lorem Ipsum\n\u00b6\n\n\nC\n1\nprintf\n(\n\"HELLO WORLD!\"\n);\n\n\nJava\n1\n2\n3\nSystem\n.\nout\n.\nprintln\n(\n\"HELLO WORLD!\"\n);\n\n\nSystem\n.\nout\n.\nprintln\n(\n\"HELLO WORLD!\"\n);\n\n\nSystem\n.\nout\n.\nprintln\n(\n\"HELLO WORLD!\"\n);\n\n\nPython\n1\nprint\n(\n\"HELLO WORLD!\"\n)\n\n\n\n\n\nLorem Gypsum\n\u00b6\n\n\nC\n1\nprintf\n(\n\"HELLO WORLD!\"\n);\n\n\nJava\n1\nSystem\n.\nout\n.\nprintln\n(\n\"HELLO WORLD!\"\n);\n\n\nPython\n1\nprint\n(\n\"HELLO WORLD!\"\n)\n\n\n\n\n\n\n\nNote\n\n\n\n\nLorem Hipsum\n\u00b6\n\n\nC\n1\nprintf\n(\n\"HELLO WORLD!\"\n);\n\n\nJava\n1\nSystem\n.\nout\n.\nprintln\n(\n\"HELLO WORLD!\"\n);\n\n\nPython\n1\nprint\n(\n\"HELLO WORLD!\"\n)\n\n\n\n\n\nPart II\n\u00b6\n\n\n \n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\npublic\n \nclass\n \nArrayExamples\n\n\n{\n   \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n[]\n \nargs\n)\n\n    \n{\n   \nint\n[]\n \nlist\n \n=\n \n{\n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n1\n,\n \n2\n,\n \n3\n};\n\n        \nfindAndPrintPairs\n(\nlist\n,\n \n5\n);\n\n        \nbubblesort\n(\nlist\n);\n\n        \nshowList\n(\nlist\n);\n\n\n        \nlist\n \n=\n \nnew\n \nint\n[]{\n \n1\n,\n \n2\n,\n \n3\n,\n \n4\n,\n \n5\n,\n \n6\n,\n \n7\n,\n \n8\n,\n \n9\n,\n \n10\n,\n \n11\n};\n\n        \nbubblesort\n(\nlist\n);\n\n        \nshowList\n(\nlist\n);\n\n\n        \nlist\n \n=\n \nnew\n \nint\n[]{\n11\n,\n \n10\n,\n \n9\n,\n \n8\n,\n \n7\n,\n \n6\n,\n \n5\n,\n \n4\n,\n \n3\n,\n \n2\n,\n \n1\n,\n \n0\n,\n \n-\n1\n,\n \n-\n2\n};\n\n        \nbubblesort\n(\nlist\n);\n\n        \nshowList\n(\nlist\n);\n\n\n        \nlist\n \n=\n \nnew\n \nint\n[]{\n1\n};\n\n        \nbubblesort\n(\nlist\n);\n\n        \nshowList\n(\nlist\n);\n\n    \n}\n\n\n\n    \n// pre: list != null, list.length > 0\n\n    \n// post: return index of minimum element of array\n\n    \npublic\n \nstatic\n \nint\n \nfindMin\n(\nint\n[]\n \nlist\n)\n\n    \n{\n   \nassert\n \nlist\n \n!=\n \nnull\n \n&&\n \nlist\n.\nlength\n \n>\n \n0\n \n:\n \n\"failed precondition\"\n;\n\n\n        \nint\n \nindexOfMin\n \n=\n \n0\n;\n\n        \nfor\n(\nint\n \ni\n \n=\n \n1\n;\n \ni\n \n<\n \nlist\n.\nlength\n;\n \ni\n++)\n\n        \n{\n   \nif\n(\nlist\n[\ni\n]\n \n<\n \nlist\n[\nindexOfMin\n])\n\n            \n{\n   \nindexOfMin\n \n=\n \ni\n;\n\n            \n}\n\n        \n}\n\n\n        \nreturn\n \nindexOfMin\n;",
            "title": "Tabs Test"
        },
        {
            "location": "/tabtest/#lorem-ipsum",
            "text": "C 1 printf ( \"HELLO WORLD!\" );  Java 1\n2\n3 System . out . println ( \"HELLO WORLD!\" );  System . out . println ( \"HELLO WORLD!\" );  System . out . println ( \"HELLO WORLD!\" );  Python 1 print ( \"HELLO WORLD!\" )",
            "title": "Lorem Ipsum"
        },
        {
            "location": "/tabtest/#lorem-gypsum",
            "text": "C 1 printf ( \"HELLO WORLD!\" );  Java 1 System . out . println ( \"HELLO WORLD!\" );  Python 1 print ( \"HELLO WORLD!\" )    Note",
            "title": "Lorem Gypsum"
        },
        {
            "location": "/tabtest/#lorem-hipsum",
            "text": "C 1 printf ( \"HELLO WORLD!\" );  Java 1 System . out . println ( \"HELLO WORLD!\" );  Python 1 print ( \"HELLO WORLD!\" )",
            "title": "Lorem Hipsum"
        },
        {
            "location": "/tabtest/#part-ii",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34 public   class   ArrayExamples  {     public   static   void   main ( String []   args ) \n     {     int []   list   =   { 1 ,   2 ,   3 ,   4 ,   1 ,   2 ,   3 }; \n         findAndPrintPairs ( list ,   5 ); \n         bubblesort ( list ); \n         showList ( list ); \n\n         list   =   new   int []{   1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 }; \n         bubblesort ( list ); \n         showList ( list ); \n\n         list   =   new   int []{ 11 ,   10 ,   9 ,   8 ,   7 ,   6 ,   5 ,   4 ,   3 ,   2 ,   1 ,   0 ,   - 1 ,   - 2 }; \n         bubblesort ( list ); \n         showList ( list ); \n\n         list   =   new   int []{ 1 }; \n         bubblesort ( list ); \n         showList ( list ); \n     } \n\n\n     // pre: list != null, list.length > 0 \n     // post: return index of minimum element of array \n     public   static   int   findMin ( int []   list ) \n     {     assert   list   !=   null   &&   list . length   >   0   :   \"failed precondition\" ; \n\n         int   indexOfMin   =   0 ; \n         for ( int   i   =   1 ;   i   <   list . length ;   i ++) \n         {     if ( list [ i ]   <   list [ indexOfMin ]) \n             {     indexOfMin   =   i ; \n             } \n         } \n\n         return   indexOfMin ;",
            "title": "Part II"
        },
        {
            "location": "/sigv2/",
            "text": "Signature v2\n\u00b6\n\n\nAuthentication by Signature\n\u00b6\n\n\nWhen a payment goes through, there's a lot of data to be exchanged between various endpoints. Payment information changes hands between your system (the merchant), the consumer's device, and our payment processing gateway (Elastic Engine). To ensure that this information is not tampered with, we need to put safeguards in place.\n\n\nWe do this by employing a \ndigital signature\n, which is used for all messages targeting the payment gateway. This signature is a mathematical cipher, which - if validated - proves that the message was created by a known sender and was not altered while being transmitted.\n\n\nThe Role of the Secret Key\n\u00b6\n\n\nYou will use your Secret Key when generating the digital signature we just mentioned above.\n\n\nThe Secret Key is only used in server-side code for either:\n\n\n\n\ngenerating\n the server \nrequest\n  signature\n\n\nvalidating\n the server \nresponse\n signature\n\n\n\n\n\n\n If you did not receive your Secret Key at the time you were setting up your merchant account with us, please contact your support representative and ask for Secret Key generation.\n\n\n We ask you to \nnever\n share your Secret Key with anyone, or store it inside your application or phone. This is crucial to ensure the security of your transactions. \n\n\n\n\nFormat\n\u00b6\n\n\nFor Mobile\n\u00b6\n\n\nThe signature is included the \nAuthorization\n header of an HTTP request in the form of:\n- the authorization scheme (\nWAUTH\n),\n- and the signature.\n\n\n \n1\nAuthorization: WAUTH SFMyNTYKcmVxdWVzdF90aW1lX3N0YW1wPTIwMTYtMDctMjdUMTQ6MzM6NDkrMDI6MDAKbWVyY2hhbnRfYWNjb3VudF9pZD05ODczYWM2NS02ZjI4LTRiNzUtYWU1NS05ZDU0OWNmNTcwZTM.2VTPD7hAiCW-NdDaUqN7pjwizuwHvirVEs1HdGU-iz0\n\n\n\nFor Seamless and Hosted Payment Pages/Embedded Payment Pages\n\u00b6\n\n\nThe signature is submitted client-side, as the variable of \nrequest_signature_v2\n, in the form of:\n\n\n\n\nthe authorization scheme (\nWAUTH\n),\n\n\nand the signature.\n\n\n\n\n \n1\nWAUTH SFMyNTYKcmVxdWVzdF90aW1lX3N0YW1wPTIwMTYtMDctMjdUMTQ6MzM6NDkrMDI6MDAKbWVyY2hhbnRfYWNjb3VudF9pZD05ODczYWM2NS02ZjI4LTRiNzUtYWU1NS05ZDU0OWNmNTcwZTM.2VTPD7hAiCW-NdDaUqN7pjwizuwHvirVEs1HdGU-iz0\n\n\n\nSignature Verification\n\u00b6\n\n\nJava\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nimport\n \njavax.crypto.Mac\n;\n\n\nimport\n \njavax.crypto.spec.SecretKeySpec\n;\n\n\nimport\n \njavax.xml.bind.DatatypeConverter\n;\n\n\n\n...\n\n\n\nprivate\n \nString\n \nmerchantSecretKey\n \n=\n \n\"merchantSecretKey\"\n;\n\n\n\npublic\n \nboolean\n \nisValidSignature\n(\nString\n \nresponseBase64\n,\n \nString\n \nresponseBase64Signature\n,\n \nString\n \nresponseSignatureAlgorithm\n)\n \nthrows\n \nException\n \n{\n\n    \nMac\n \nmac\n \n=\n \nMac\n.\ngetInstance\n(\nresponseSignatureAlgorithm\n);\n\n    \nmac\n.\ninit\n(\nnew\n \nSecretKeySpec\n(\nmerchantSecretKey\n.\ngetBytes\n(\n\"UTF-8\"\n),\n \nresponseSignatureAlgorithm\n));\n\n    \nreturn\n \nresponseBase64Signature\n \n!=\n \nnull\n \n&&\n \nresponseBase64Signature\n.\nequals\n(\nDatatypeConverter\n.\nprintBase64Binary\n(\nmac\n.\ndoFinal\n(\nresponseBase64\n.\ngetBytes\n(\n\"UTF-8\"\n))));\n\n\n}\n\n\nPhp\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n<?php\n\n\n\n/**\n\n\n * @param string $responseBase64\n\n\n * @param string $signatureBase64\n\n\n * @return bool\n\n\n */\n\n\nfunction\n \nisValidSignature\n(\n$responseBase64\n,\n \n$signatureBase64\n,\n \n$merchantSecreyKey\n)\n\n\n{\n\n    \n$signature\n \n=\n \nhash_hmac\n(\n'sha256'\n,\n \nbase64_decode\n(\n$responseBase64\n),\n \n$merchantSecreyKey\n);\n\n    \nreturn\n \nhash_equals\n(\n$signature\n,\n \nbase64_decode\n(\n$signatureBase64\n));\n\n\n}\n\n\nCsharp\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n \nusing\n\n  \nSystem.Linq\n;\n\n\n  \nusing\n\n  \nSystem.Security.Cryptography\n;\n\n\n  \nusing\n\n  \nSystem.Text\n;\n\n\n  \n\u2026\n        \n  \nString\n \nmerchantSecretKey\n \n=\n \n\"key\"\n;\n\n\n  \nBoolean\n \nisValidSignature\n(\nString\n \nresponseBase64\n,\n \nString\n \nsignatureBase64\n,\n\n  \nString\n \nresponseSignatureAlgorithm\n)\n\n\n\n{\n            \n  \nif\n \n(\nresponseBase64\n \n==\n \nnull\n \n||\n \nsignatureBase64\n \n==\n \nnull\n \n||\n \nresponseSignatureAlgorithm\n \n==\n \nnull\n)\n            \n  \n{\n                \n    \nreturn\n \nfalse\n;\n            \n\n}\n\n\n  \nbyte\n[]\n \nresponse\n \n=\n \nConvert\n.\nFromBase64String\n(\nresponseBase64\n);\n            \n  \nbyte\n[]\n \nexpectedSignature\n \n=\n \nConvert\n.\nFromBase64String\n(\nsignatureBase64\n);\n \n\n  \nKeyedHashAlgorithm\n \nalgorithm\n \n=\nKeyedHashAlgorithm\n.\nCreate\n(\nresponseSignatureAlgorithm\n);\n            \n  \nalgorithm\n.\nKey\n \n=\n \nEncoding\n.\nUTF8\n.\nGetBytes\n(\nmerchantSecretKey\n);\n            \n  \nalgorithm\n.\nInitialize\n();\n\n\n  \nbyte\n[]\n \ncomputedSignature\n \n=\n \nalgorithm\n.\nComputeHash\n(\nresponse\n);\n            \n  \nBoolean\n \nresult\n \n=\n \ncomputedSignature\n.\nSequenceEqual\n(\nexpectedSignature\n);\n            \n  \nreturn\n \nresult\n;\n        \n\n}",
            "title": "Signature v2"
        },
        {
            "location": "/sigv2/#signature-v2",
            "text": "",
            "title": "Signature v2"
        },
        {
            "location": "/sigv2/#authentication-by-signature",
            "text": "When a payment goes through, there's a lot of data to be exchanged between various endpoints. Payment information changes hands between your system (the merchant), the consumer's device, and our payment processing gateway (Elastic Engine). To ensure that this information is not tampered with, we need to put safeguards in place.  We do this by employing a  digital signature , which is used for all messages targeting the payment gateway. This signature is a mathematical cipher, which - if validated - proves that the message was created by a known sender and was not altered while being transmitted.",
            "title": "Authentication by Signature"
        },
        {
            "location": "/sigv2/#the-role-of-the-secret-key",
            "text": "You will use your Secret Key when generating the digital signature we just mentioned above.  The Secret Key is only used in server-side code for either:   generating  the server  request   signature  validating  the server  response  signature     If you did not receive your Secret Key at the time you were setting up your merchant account with us, please contact your support representative and ask for Secret Key generation.   We ask you to  never  share your Secret Key with anyone, or store it inside your application or phone. This is crucial to ensure the security of your transactions.",
            "title": "The Role of the Secret Key"
        },
        {
            "location": "/sigv2/#format",
            "text": "",
            "title": "Format"
        },
        {
            "location": "/sigv2/#for-mobile",
            "text": "The signature is included the  Authorization  header of an HTTP request in the form of:\n- the authorization scheme ( WAUTH ),\n- and the signature.    1 Authorization: WAUTH SFMyNTYKcmVxdWVzdF90aW1lX3N0YW1wPTIwMTYtMDctMjdUMTQ6MzM6NDkrMDI6MDAKbWVyY2hhbnRfYWNjb3VudF9pZD05ODczYWM2NS02ZjI4LTRiNzUtYWU1NS05ZDU0OWNmNTcwZTM.2VTPD7hAiCW-NdDaUqN7pjwizuwHvirVEs1HdGU-iz0",
            "title": "For Mobile"
        },
        {
            "location": "/sigv2/#for-seamless-and-hosted-payment-pagesembedded-payment-pages",
            "text": "The signature is submitted client-side, as the variable of  request_signature_v2 , in the form of:   the authorization scheme ( WAUTH ),  and the signature.     1 WAUTH SFMyNTYKcmVxdWVzdF90aW1lX3N0YW1wPTIwMTYtMDctMjdUMTQ6MzM6NDkrMDI6MDAKbWVyY2hhbnRfYWNjb3VudF9pZD05ODczYWM2NS02ZjI4LTRiNzUtYWU1NS05ZDU0OWNmNTcwZTM.2VTPD7hAiCW-NdDaUqN7pjwizuwHvirVEs1HdGU-iz0",
            "title": "For Seamless and Hosted Payment Pages/Embedded Payment Pages"
        },
        {
            "location": "/sigv2/#signature-verification",
            "text": "Java  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 import   javax.crypto.Mac ;  import   javax.crypto.spec.SecretKeySpec ;  import   javax.xml.bind.DatatypeConverter ;  ...  private   String   merchantSecretKey   =   \"merchantSecretKey\" ;  public   boolean   isValidSignature ( String   responseBase64 ,   String   responseBase64Signature ,   String   responseSignatureAlgorithm )   throws   Exception   { \n     Mac   mac   =   Mac . getInstance ( responseSignatureAlgorithm ); \n     mac . init ( new   SecretKeySpec ( merchantSecretKey . getBytes ( \"UTF-8\" ),   responseSignatureAlgorithm )); \n     return   responseBase64Signature   !=   null   &&   responseBase64Signature . equals ( DatatypeConverter . printBase64Binary ( mac . doFinal ( responseBase64 . getBytes ( \"UTF-8\" ))));  }  Php  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 <?php  /**   * @param string $responseBase64   * @param string $signatureBase64   * @return bool   */  function   isValidSignature ( $responseBase64 ,   $signatureBase64 ,   $merchantSecreyKey )  { \n     $signature   =   hash_hmac ( 'sha256' ,   base64_decode ( $responseBase64 ),   $merchantSecreyKey ); \n     return   hash_equals ( $signature ,   base64_decode ( $signatureBase64 ));  }  Csharp  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32   using \n   System.Linq ; \n\n   using \n   System.Security.Cryptography ; \n\n   using \n   System.Text ; \n\n   \u2026         \n   String   merchantSecretKey   =   \"key\" ; \n\n   Boolean   isValidSignature ( String   responseBase64 ,   String   signatureBase64 , \n   String   responseSignatureAlgorithm )  {             \n   if   ( responseBase64   ==   null   ||   signatureBase64   ==   null   ||   responseSignatureAlgorithm   ==   null )             \n   {                 \n     return   false ;              } \n\n   byte []   response   =   Convert . FromBase64String ( responseBase64 );             \n   byte []   expectedSignature   =   Convert . FromBase64String ( signatureBase64 );  \n\n   KeyedHashAlgorithm   algorithm   = KeyedHashAlgorithm . Create ( responseSignatureAlgorithm );             \n   algorithm . Key   =   Encoding . UTF8 . GetBytes ( merchantSecretKey );             \n   algorithm . Initialize (); \n\n   byte []   computedSignature   =   algorithm . ComputeHash ( response );             \n   Boolean   result   =   computedSignature . SequenceEqual ( expectedSignature );             \n   return   result ;          }",
            "title": "Signature Verification"
        },
        {
            "location": "/markdownsupport/",
            "text": "Markdown Support\n\u00b6\n\n\nThis document contains examples of most of Markdown elements that Caret supports.\n\n\nInlines\n\u00b6\n\n\nThis is an \nemphasis\n and this a strong \nemphasis\n. This is a \nlink\n and this is a \nreference link\n. This is a \ncode span\n and this is some \ninline html\n.\n\n\nNote that *this* is not an emphasis. That's because the \n\\\n character escapes special characters.\n\n\nMost inline elements can be nested. For example this is a \nlink that contains a \nemphasis\n.\n\n\nLeaf Blocks \ud83c\udf41\n\u00b6\n\n\nA line consisting of 0-3 spaces of indentation, followed by a sequence of three or more matching \n-\n, \n_\n, or \n*\n, each followed optionally by any number of spaces, forms a \nthematic break\n.\n\n\n\n\nThis is an indented code block:\n\n\n1\n2\n3\n4\nvar\n \ntext\n \n=\n \n\"text\"\n;\n\n\nfunction\n \ndoNothing() {\n\n  \nreturn\n;\n\n\n}\n\n\n\n\n\n\n\nFenced code blocks support syntax highlighting for most of the popular programming languages:\n\n\n \n1\nvar\n \ntext\n \n=\n \n\"text\"\n;\n \n// variable definition\n\n\n\n\nHTML block:\n\n\n\n  This will appear as a block of with a yellow background.\n\n\n\n\nThis is a HTML comment:\n\n\n\n\n\nThis is a table with some \ud83d\udcda and with a \nPrice\n column aligned right:\n\n\n\n\n\n\n\n\nTitle\n\n\nAuthor\n\n\nPrice\n\n\n\n\n\n\n\n\n\n\nMeditations\n\n\nMarcus Aurelius\n\n\n$10.00\n\n\n\n\n\n\nRational Optimist\n\n\nMatt Ridley\n\n\n$12.00\n\n\n\n\n\n\nPoor Charlie's Almanack\n\n\nCharles T. Munger\n\n\n$16.50\n\n\n\n\n\n\n\n\nContainer Blocks \ud83c\udf33\n\u00b6\n\n\nHere's a list that we've copied from a \nGitHub article\n:\n\n\n\n\nHow the Markdown format makes styled collaborative editing easy\n\n\nHow Markdown differs from traditional formatting approaches\n\n\nHow to use Markdown to format text\n\n\nHow to leverage GitHub\u2019s automatic Markdown rendering\n\n\nHow to apply GitHub\u2019s unique Markdown extensions\n\n\n\n\nThis is an ordered list from another GitHub article:\n\n\n\n\nCreate a branch\n: Topic branches created from the canonical deployment branch (usually master) allow teams to contribute to many parallel efforts. Short-lived topic branches, in particular, keep teams focused and results in quick ships.\n\n\nAdd commits\n: Snapshots of development efforts within a branch create safe, revertible points in the project\u2019s history.\n\n\nOpen a pull request\n: Pull requests publicize a project\u2019s ongoing efforts and set the tone for a transparent development process.\n\n\n\n\nThis is a task list with some random tasks: \n\n\n\n\n[x] Write an article about how to manage tasks in a text editor \n\n\n[ ] Repair windshield wipers of car and add washer fluid \ud83d\ude98\n\n\n[ ] Get \n2\n airplane tickets to ::SF:: for the upcoming \nElectron conference\n \u2708\ufe0f\n\n\n\n\nThis is a quote:\n\n\n\n\nAnd so, my fellow Americans: ask not what your country can do for you \u2014 ask what you can do for your country\n\n\n\n\nOh and since these are container blocks, they can be nested:\n\n\n\n\nFor example, this is a list that's inside of a quote:\n\n This is a list item that has been quoted.\n\n This is another list item which makes this a list of 2 items.",
            "title": "Markdown Showcase"
        },
        {
            "location": "/markdownsupport/#markdown-support",
            "text": "This document contains examples of most of Markdown elements that Caret supports.",
            "title": "Markdown Support"
        },
        {
            "location": "/markdownsupport/#inlines",
            "text": "This is an  emphasis  and this a strong  emphasis . This is a  link  and this is a  reference link . This is a  code span  and this is some  inline html .  Note that *this* is not an emphasis. That's because the  \\  character escapes special characters.  Most inline elements can be nested. For example this is a  link that contains a  emphasis .",
            "title": "Inlines"
        },
        {
            "location": "/markdownsupport/#leaf-blocks",
            "text": "A line consisting of 0-3 spaces of indentation, followed by a sequence of three or more matching  - ,  _ , or  * , each followed optionally by any number of spaces, forms a  thematic break .   This is an indented code block:  1\n2\n3\n4 var   text   =   \"text\" ;  function   doNothing() { \n   return ;  }    Fenced code blocks support syntax highlighting for most of the popular programming languages:    1 var   text   =   \"text\" ;   // variable definition   HTML block:  \n  This will appear as a block of with a yellow background.  This is a HTML comment:   This is a table with some \ud83d\udcda and with a  Price  column aligned right:     Title  Author  Price      Meditations  Marcus Aurelius  $10.00    Rational Optimist  Matt Ridley  $12.00    Poor Charlie's Almanack  Charles T. Munger  $16.50",
            "title": "Leaf Blocks \ud83c\udf41"
        },
        {
            "location": "/markdownsupport/#container-blocks",
            "text": "Here's a list that we've copied from a  GitHub article :   How the Markdown format makes styled collaborative editing easy  How Markdown differs from traditional formatting approaches  How to use Markdown to format text  How to leverage GitHub\u2019s automatic Markdown rendering  How to apply GitHub\u2019s unique Markdown extensions   This is an ordered list from another GitHub article:   Create a branch : Topic branches created from the canonical deployment branch (usually master) allow teams to contribute to many parallel efforts. Short-lived topic branches, in particular, keep teams focused and results in quick ships.  Add commits : Snapshots of development efforts within a branch create safe, revertible points in the project\u2019s history.  Open a pull request : Pull requests publicize a project\u2019s ongoing efforts and set the tone for a transparent development process.   This is a task list with some random tasks:    [x] Write an article about how to manage tasks in a text editor   [ ] Repair windshield wipers of car and add washer fluid \ud83d\ude98  [ ] Get  2  airplane tickets to ::SF:: for the upcoming  Electron conference  \u2708\ufe0f   This is a quote:   And so, my fellow Americans: ask not what your country can do for you \u2014 ask what you can do for your country   Oh and since these are container blocks, they can be nested:   For example, this is a list that's inside of a quote:  This is a list item that has been quoted.  This is another list item which makes this a list of 2 items.",
            "title": "Container Blocks \ud83c\udf33"
        }
    ]
}