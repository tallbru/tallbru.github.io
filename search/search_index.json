{
    "docs": [
        {
            "location": "/",
            "text": "Mobile paymentSDK\n\u00b6\n\n\n\n\nWelcome to the documentation for Mobile paymentSDK, a lightweight user interface for the Elastic Engine payment gateway.\n\n\nHere, we will try to give you a solid overview of features, options, and code examples you can use as a guide for your own integration of paymentSDK into your app.\n\n\nYou do not need to be a coding genius to make sense of this documentation (or paymentSDK itself), but we assume that you are familiar with the basics of programming, computers, and your platform of choice (iOS/Android). \n\n\n\n\n If you feel like something is missing, or you find errors, please do contact us @TBA\n\n\n\n\nA. Payment Methods\n\u00b6\n\n\n\n\nYou can find a list of available payment methods, along with the supported transaction types, at this \nlink\n. \n\n\nThe transaction types which are \nnot\n printed in bold are not supported (nor recommended) to be implemented as a part of Mobile paymentSDK because of the inherent security risks & limitations of the mobile platform.\n\n\nB. Security\n\u00b6\n\n\n\n\n1. First steps\n\u00b6\n\n\nBefore you start coding, you are going to need some credentials:\n\n\n\n\nMerchant Account ID -  the ID of your merchant account that will be used to process transactions\n\n\nSecret Key - a value that you will use to create unique security signatures for your transactions\n\n\n\n\n\n\n You can find testing credentials at \nthis\n link.\n\n\n\n\nNext, depending on where you are from, choose your closest production environment; this is where your instance of paymentSDK will be hosted. Both testing and production environments are available in every location. At the moment, these are the supported locations:\n\n\nGermany\n |\n\nSingapore\n |\n\nToronto",
            "title": "Home"
        },
        {
            "location": "/#mobile-paymentsdk",
            "text": "Welcome to the documentation for Mobile paymentSDK, a lightweight user interface for the Elastic Engine payment gateway.  Here, we will try to give you a solid overview of features, options, and code examples you can use as a guide for your own integration of paymentSDK into your app.  You do not need to be a coding genius to make sense of this documentation (or paymentSDK itself), but we assume that you are familiar with the basics of programming, computers, and your platform of choice (iOS/Android).     If you feel like something is missing, or you find errors, please do contact us @TBA",
            "title": "Mobile paymentSDK"
        },
        {
            "location": "/#a-payment-methods",
            "text": "You can find a list of available payment methods, along with the supported transaction types, at this  link .   The transaction types which are  not  printed in bold are not supported (nor recommended) to be implemented as a part of Mobile paymentSDK because of the inherent security risks & limitations of the mobile platform.",
            "title": "A. Payment Methods"
        },
        {
            "location": "/#b-security",
            "text": "",
            "title": "B. Security"
        },
        {
            "location": "/#1-first-steps",
            "text": "Before you start coding, you are going to need some credentials:   Merchant Account ID -  the ID of your merchant account that will be used to process transactions  Secret Key - a value that you will use to create unique security signatures for your transactions     You can find testing credentials at  this  link.   Next, depending on where you are from, choose your closest production environment; this is where your instance of paymentSDK will be hosted. Both testing and production environments are available in every location. At the moment, these are the supported locations:  Germany  | Singapore  | Toronto",
            "title": "1. First steps"
        },
        {
            "location": "/android/",
            "text": "Integration on Android\n\u00b6\n\n\n\n\n The device needs to be non-rooted and run at least Android 4.1 (Jelly Bean / API Level 16) for paymentSDK to work.\n\n\n\n\nSetting up paymentSDK\n\u00b6\n\n\nDownloading paymentSDK\n\u00b6\n\n\nIt's time to incorporate paymentSDK into your app. You can do that in two ways:\n\n\na) Using a Dependency Manager\n\u00b6\n\n\nWith this option, you will be getting paymentSDK straight from the repository using \nJitPack\n.\n\n\nFirst of all, you need to have created your project already in the Android studio. Then you simply add the following code to your \nbuild.gradle\n file:\n\n\n repositories {\n     maven { url \"https://jitpack.io\" }\n }\n dependencies {\n     compile 'com.github.wirecard:paymentSDK-Android:2.7.1'\n }\n\n\n\n\n\nSome of our customers prefer an alternative version of paymentSDK, one which does not feature the card scanner capability (i.e. scanning the card information using the phone's camera).\n\n\nIf that's you, add this dependency instead:\n\n\n dependencies {\n    compile 'com.github.wirecard:paymentSDK-Android:2.7.1-cardScannerDisabled'\n }\n\n\n\n\n\nb) Importing Through Android Studio\n\u00b6\n\n\nAfter you download the paymentSDK package from \nour GitHub repository\n, simply use the Android Studio's \nImport .JAR/.AAR Package\n option located in File -> New -> New Module.\n\n\nThen, add the paymentSDK module as a dependency to your \nbuild.gradle\n file as shown in the example:\n\n\n dependencies {\n   ...\n   compile project(':paymentsdk')\n   ...\n }\n\n\n\n\n\n\n\nExternal Libraries & Other\n\u00b6\n\n\nOur SDK uses various 3rd party libraries which you will need to include in your \nbuild.gradle\n file. These should be kept at their latest stable versions:\n\n\n dependencies {\n       ...\n       compile\u00a0'com.android.support:appcompat-v7:25.3.1'\n       compile\u00a0'com.squareup.retrofit2:retrofit:2.1.0'\n       compile\u00a0'com.squareup.retrofit2:converter-gson:2.1.0'\n       compile\u00a0'com.squareup.okhttp3:logging-interceptor:3.5.0'\n       compile('com.squareup.retrofit2:converter-simplexml:2.1.0') {\n    \u00a0\u00a0\u00a0\u00a0 exclude\u00a0module:\u00a0'stax'\n    \u00a0\u00a0\u00a0\u00a0 exclude\u00a0module:\u00a0'stax-api'\n    \u00a0\u00a0\u00a0\u00a0 exclude\u00a0module:\u00a0'xpp3'\n }\n compile\u00a0'io.card:android-sdk:5.5.1' \n       ...\n }\n\n\n\n\n\n\n\n Including \nio.card:android-sdk\n  is optional when using the alternative paymentSDK version (without the card scanner feature).\n\n\nIt is important that you adjust \ncom.android.support:appcompat\n to the latest version of the support library.\n\n\n\n\nAndroidManifest\n Setup\n\u00b6\n\n\npaymentSDK  requires these permissions to function:\n\n\n<uses-permission\u00a0android:name=\"android.permission.INTERNET\"\u00a0/>\n <uses-permission\u00a0android:name=\"android.permission.ACCESS_NETWORK_STATE\"\u00a0/>\n\n\n\n\n\nIf you plan on using the card scanner feature, you will need to:\n\n\n\n\nadd these permissions:\n\n\n\n\n<uses-permission\u00a0android:name=\"android.permission.VIBRATE\"\u00a0/>\n<uses-permission\u00a0android:name=\"android.permission.CAMERA\"\u00a0/> \n\n\n\n\n\n\n\nadd this activity into your \nAndroidManifest\n file:\n\n\n\n\n<activity\n\u00a0\u00a0\u00a0\u00a0android:name=\"de.wirecard.paymentsdk.ui.activity.CardScannerActivity\" /> \n\n\n\n\n\nAgain, if you do not require the card scanner capability in your app, you can safely omit this step. \n\n\nProguard\n\u00b6\n\n\nIf you are using \nProguard\n, you will need to add the following rules into your \nproguard-rules.pro\n file:\n\n\n -dontwarn org.simpleframework.**\n -dontwarn io.card.**\n -dontwarn okhttp3.**\n -dontwarn okio.**\n -dontwarn retrofit2.**\n -dontwarn de.wirecard.paymentsdk.**\n\n -keepattributes Signature\n -keepattributes Exceptions\n -keepattributes JavascriptInterface\n -keepattributes *Annotation*\n\n -keep class org.simpleframework.** { *; }\n -keep interface org.simpleframework.** { *; }\n\n -keep class okhttp3.** { *;}\n\n -keep class okio.** { *; }\n -keep interface okio.** { *; }\n\n -keep class retrofit2.** { *; }\n\n -keep class io.card.**\n -keepclassmembers class io.card.** {\n      *;\n }\n\n -keep class de.wirecard.paymentsdk.** { *; }\n -keep interface de.wirecard.paymentsdk.** { *; }\n ```\n  Again, if you are using the alternative version without the card scanner feature, you can leave out this part:\n\n\n\n\n\n-keep class io.card.\n\n -keepclassmembers class io.card.\n {\n      *;\n\n\n---\n\n## Code Examples\n\nIn this section, you will find code examples of basic transactions for each payment method.\n\n### Read First\nRegardless of your payment method choice,  you need to create and initialize a `WirecardClient` instance before anything else:\n\n> ![](https://s20.postimg.org/mksax8kgd/bulb24.png) paymentSDK only works with non-rooted devices; if it detects a device that is rooted, it will throw an exception during initialization of the `WirecardClient` object. \n```java\nWirecardClient wirecardClient;\nString environment = WirecardEnvironment.TEST.name();\ntry {\n    wirecardClient = WirecardClientBuilder.newInstance(context, environment)\n                    .build();\n} catch (WirecardException exception) {\n    //device is rooted\n}\n\n\n\n\n\nThe example above also handles the \"device is rooted\" exception situation by using \ntry\n and \ncatch\n.\n\n\n\n\n1. Card Payment\n\u00b6\n\n\n\n\n Do not forget to create and initialize an instance of the \nWirecardClient\n object before you go further, as explained at the \nbeginning\n of this section.\n\n\n\n\nFull Screen Form\n\u00b6\n\n\nSimple Transactions\n\u00b6\n\n\n\n\nCreate and initialize the  \nWirecardCardPayment\n object, which stores the transaction's payload & signature:\n\n\n\n\nWirecardCardPayment\n \nwirecardCardPayment\n \n=\n \nnew\n \nWirecardCardPayment\n(\ntimestamp\n,\n \nrequestID\n,\n \nmerchantID\n,\n \ntransactionType\n,\n \namount\n,\n \ncurrency\n,\n \nsignature\n);\n\n\n\n\n\n\n\n\nInitialize the \nWirecardResponseListener\n object, which stores callback methods that will let you know the result of the transaction, or any errors, should they occur.\n\n\n\n\nWirecardResponseListener\n \nwirecardResponseListener\n \n=\n \nnew\n \nWirecardResponseListener\n()\n \n{\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonResponse\n(\nWirecardPaymentResponse\n \npaymentResponse\n)\n \n{\n\n        \n// handle server response\n\n        \nif\n \n(\npaymentResponse\n.\ngetTransactionState\n().\nequals\n(\nTransactionState\n.\nSUCCESS\n))\n \n{\n\n            \n// handle successful transaction\n\n        \n}\n \nelse\n \n{\n\n            \n// handle unsuccessful transaction\n\n        \n}\n\n    \n}\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nonError\n(\nWirecardResponseError\n \nresponseError\n)\n \n{\n\n        \n// handle error\n\n        \nswitch\n \n(\nresponseError\n.\ngetErrorCode\n())\n \n{\n\n            \ncase\n \nWirecardErrorCode\n.\nERROR_CODE_GENERAL\n:\n\n                \nString\n \ndetailedMessage\n \n=\n \nresponseError\n.\ngetErrorMessage\n();\n\n                \n//...\n\n                \nbreak\n;\n\n            \ncase\n \nWirecardErrorCode\n.\nERROR_CODE_INVALID_PAYMENT_DATA\n:\n\n                \n//...\n\n                \nbreak\n;\n\n            \ncase\n \nWirecardErrorCode\n.\nERROR_CODE_NETWORK_ISSUE\n:\n\n                \n//...\n\n                \nbreak\n;\n\n            \ncase\n \nWirecardErrorCode\n.\nERROR_CODE_USER_CANCELED\n:\n\n                \n//...\n\n                \nbreak\n;\n\n        \n}\n\n    \n}\n\n\n};\n\n\n\n\n\n\n\n\nTo send the transaction request, call the \nWirecardClient\n's method \nmakePayment\n to send the transaction request:\n\n\n\n\nwirecardClient\n.\nmakePayment\n(\nwirecardCardPayment\n,\n \nwirecardResponseListener\n,\n \npaymentPageStyle\n);\n\n\n\n\n\n\n\n\n You can customize the UI through resources of the \npaymentPageStyle\n object. We will revisit the 'how' at the end of this section.\n\n\n\n\n\n\nFinally, process the response. If everything went smoothly server-side, the \nonResponse\n method will be called. If any errors occurred, \nonError\n will be called instead.\n\n\n\n\nReferenced Transactions\n\u00b6\n\n\nIf you need to perform referenced transactions (i.e. one's using a \ntoken\n or \nparentTransactionID\n), simply set then into the \nwirecardCardPayment\n instance:\n\n\nwirecardPayment\n.\nsetParentTransactionID\n(\nparentTransactionID\n);\n\n\n\n\n\n\nOR\n\n\nCardToken\n \ncardToken\n \n=\n \nnew\n \nCardToken\n(\ntokenID\n,\n \nmaskedAccountNumber\n);\n\n\nwirecardPayment\n.\nsetCardToken\n(\ncardToken\n);",
            "title": "Android"
        },
        {
            "location": "/android/#integration-on-android",
            "text": "The device needs to be non-rooted and run at least Android 4.1 (Jelly Bean / API Level 16) for paymentSDK to work.",
            "title": "Integration on Android"
        },
        {
            "location": "/android/#setting-up-paymentsdk",
            "text": "",
            "title": "Setting up paymentSDK"
        },
        {
            "location": "/android/#downloading-paymentsdk",
            "text": "It's time to incorporate paymentSDK into your app. You can do that in two ways:",
            "title": "Downloading paymentSDK"
        },
        {
            "location": "/android/#a-using-a-dependency-manager",
            "text": "With this option, you will be getting paymentSDK straight from the repository using  JitPack .  First of all, you need to have created your project already in the Android studio. Then you simply add the following code to your  build.gradle  file:   repositories {\n     maven { url \"https://jitpack.io\" }\n }\n dependencies {\n     compile 'com.github.wirecard:paymentSDK-Android:2.7.1'\n }  Some of our customers prefer an alternative version of paymentSDK, one which does not feature the card scanner capability (i.e. scanning the card information using the phone's camera).  If that's you, add this dependency instead:   dependencies {\n    compile 'com.github.wirecard:paymentSDK-Android:2.7.1-cardScannerDisabled'\n }",
            "title": "a) Using a Dependency Manager"
        },
        {
            "location": "/android/#b-importing-through-android-studio",
            "text": "After you download the paymentSDK package from  our GitHub repository , simply use the Android Studio's  Import .JAR/.AAR Package  option located in File -> New -> New Module.  Then, add the paymentSDK module as a dependency to your  build.gradle  file as shown in the example:   dependencies {\n   ...\n   compile project(':paymentsdk')\n   ...\n }",
            "title": "b) Importing Through Android Studio"
        },
        {
            "location": "/android/#external-libraries-other",
            "text": "Our SDK uses various 3rd party libraries which you will need to include in your  build.gradle  file. These should be kept at their latest stable versions:   dependencies {\n       ...\n       compile\u00a0'com.android.support:appcompat-v7:25.3.1'\n       compile\u00a0'com.squareup.retrofit2:retrofit:2.1.0'\n       compile\u00a0'com.squareup.retrofit2:converter-gson:2.1.0'\n       compile\u00a0'com.squareup.okhttp3:logging-interceptor:3.5.0'\n       compile('com.squareup.retrofit2:converter-simplexml:2.1.0') {\n    \u00a0\u00a0\u00a0\u00a0 exclude\u00a0module:\u00a0'stax'\n    \u00a0\u00a0\u00a0\u00a0 exclude\u00a0module:\u00a0'stax-api'\n    \u00a0\u00a0\u00a0\u00a0 exclude\u00a0module:\u00a0'xpp3'\n }\n compile\u00a0'io.card:android-sdk:5.5.1' \n       ...\n }    Including  io.card:android-sdk   is optional when using the alternative paymentSDK version (without the card scanner feature).  It is important that you adjust  com.android.support:appcompat  to the latest version of the support library.",
            "title": "External Libraries &amp; Other"
        },
        {
            "location": "/android/#androidmanifest-setup",
            "text": "paymentSDK  requires these permissions to function:  <uses-permission\u00a0android:name=\"android.permission.INTERNET\"\u00a0/>\n <uses-permission\u00a0android:name=\"android.permission.ACCESS_NETWORK_STATE\"\u00a0/>  If you plan on using the card scanner feature, you will need to:   add these permissions:   <uses-permission\u00a0android:name=\"android.permission.VIBRATE\"\u00a0/>\n<uses-permission\u00a0android:name=\"android.permission.CAMERA\"\u00a0/>    add this activity into your  AndroidManifest  file:   <activity\n\u00a0\u00a0\u00a0\u00a0android:name=\"de.wirecard.paymentsdk.ui.activity.CardScannerActivity\" />   Again, if you do not require the card scanner capability in your app, you can safely omit this step.",
            "title": "AndroidManifest Setup"
        },
        {
            "location": "/android/#proguard",
            "text": "If you are using  Proguard , you will need to add the following rules into your  proguard-rules.pro  file:   -dontwarn org.simpleframework.**\n -dontwarn io.card.**\n -dontwarn okhttp3.**\n -dontwarn okio.**\n -dontwarn retrofit2.**\n -dontwarn de.wirecard.paymentsdk.**\n\n -keepattributes Signature\n -keepattributes Exceptions\n -keepattributes JavascriptInterface\n -keepattributes *Annotation*\n\n -keep class org.simpleframework.** { *; }\n -keep interface org.simpleframework.** { *; }\n\n -keep class okhttp3.** { *;}\n\n -keep class okio.** { *; }\n -keep interface okio.** { *; }\n\n -keep class retrofit2.** { *; }\n\n -keep class io.card.**\n -keepclassmembers class io.card.** {\n      *;\n }\n\n -keep class de.wirecard.paymentsdk.** { *; }\n -keep interface de.wirecard.paymentsdk.** { *; }\n ```\n  Again, if you are using the alternative version without the card scanner feature, you can leave out this part:  -keep class io.card. \n -keepclassmembers class io.card.  {\n      *;  ---\n\n## Code Examples\n\nIn this section, you will find code examples of basic transactions for each payment method.\n\n### Read First\nRegardless of your payment method choice,  you need to create and initialize a `WirecardClient` instance before anything else:\n\n> ![](https://s20.postimg.org/mksax8kgd/bulb24.png) paymentSDK only works with non-rooted devices; if it detects a device that is rooted, it will throw an exception during initialization of the `WirecardClient` object. \n```java\nWirecardClient wirecardClient;\nString environment = WirecardEnvironment.TEST.name();\ntry {\n    wirecardClient = WirecardClientBuilder.newInstance(context, environment)\n                    .build();\n} catch (WirecardException exception) {\n    //device is rooted\n}  The example above also handles the \"device is rooted\" exception situation by using  try  and  catch .",
            "title": "Proguard"
        },
        {
            "location": "/android/#1-card-payment",
            "text": "Do not forget to create and initialize an instance of the  WirecardClient  object before you go further, as explained at the  beginning  of this section.",
            "title": "1. Card Payment"
        },
        {
            "location": "/android/#full-screen-form",
            "text": "",
            "title": "Full Screen Form"
        },
        {
            "location": "/android/#simple-transactions",
            "text": "Create and initialize the   WirecardCardPayment  object, which stores the transaction's payload & signature:   WirecardCardPayment   wirecardCardPayment   =   new   WirecardCardPayment ( timestamp ,   requestID ,   merchantID ,   transactionType ,   amount ,   currency ,   signature );    Initialize the  WirecardResponseListener  object, which stores callback methods that will let you know the result of the transaction, or any errors, should they occur.   WirecardResponseListener   wirecardResponseListener   =   new   WirecardResponseListener ()   { \n     @Override \n     public   void   onResponse ( WirecardPaymentResponse   paymentResponse )   { \n         // handle server response \n         if   ( paymentResponse . getTransactionState (). equals ( TransactionState . SUCCESS ))   { \n             // handle successful transaction \n         }   else   { \n             // handle unsuccessful transaction \n         } \n     } \n     @Override \n     public   void   onError ( WirecardResponseError   responseError )   { \n         // handle error \n         switch   ( responseError . getErrorCode ())   { \n             case   WirecardErrorCode . ERROR_CODE_GENERAL : \n                 String   detailedMessage   =   responseError . getErrorMessage (); \n                 //... \n                 break ; \n             case   WirecardErrorCode . ERROR_CODE_INVALID_PAYMENT_DATA : \n                 //... \n                 break ; \n             case   WirecardErrorCode . ERROR_CODE_NETWORK_ISSUE : \n                 //... \n                 break ; \n             case   WirecardErrorCode . ERROR_CODE_USER_CANCELED : \n                 //... \n                 break ; \n         } \n     }  };    To send the transaction request, call the  WirecardClient 's method  makePayment  to send the transaction request:   wirecardClient . makePayment ( wirecardCardPayment ,   wirecardResponseListener ,   paymentPageStyle );     You can customize the UI through resources of the  paymentPageStyle  object. We will revisit the 'how' at the end of this section.    Finally, process the response. If everything went smoothly server-side, the  onResponse  method will be called. If any errors occurred,  onError  will be called instead.",
            "title": "Simple Transactions"
        },
        {
            "location": "/android/#referenced-transactions",
            "text": "If you need to perform referenced transactions (i.e. one's using a  token  or  parentTransactionID ), simply set then into the  wirecardCardPayment  instance:  wirecardPayment . setParentTransactionID ( parentTransactionID );   OR  CardToken   cardToken   =   new   CardToken ( tokenID ,   maskedAccountNumber );  wirecardPayment . setCardToken ( cardToken );",
            "title": "Referenced Transactions"
        },
        {
            "location": "/iOS/",
            "text": "Integration on iOS\n\u00b6\n\n\n\n\n The device cannot be jail-broken and must run at least iOS 7 for paymentSDK to work. It is recommended to use the latest stable version of Xcode.\n\n\n\n\nGetting paymentSDK\n\u00b6\n\n\nDownload the pod at our \nGitHub repository\n and add it to your \nPodfile\n:\n\n\npod\n \n'\npaymentSDK\n'\n\n\n\n\n\n\nExternal Libraries\n\u00b6\n\n\nCode Examples\n\u00b6\n\n\nIn this section, you will find code examples of basic transactions for each payment method.\n\n\nApple Pay\n\u00b6\n\n\nBefore you start\n\u00b6\n\n\n\n\n We assume that you have access to your testing environment at this point. \n\n\n\n\nSince Apple Pay is a proprietary service, the setup process is a bit more complicated.\n\n\nFor setup, you need to:\n\n\n\n\nContact our merchant support to \ncreate a test Elastic Engine Apple Pay merchant account\n and \nset up its Apple Merchant ID\n.\n\n\nDepending on whether you had an existing Apple Merchant ID, you will need to:\n\n\nupload the CSR file you've received in the previous step, \n\n\nregister with the Apple Merchant ID provided from us, AND upload the CSR file\n\n\n\n\nAdditional information can be found in \nApple's own documentation\n.\n\n\nAfter you've set up your accounts:\n1. You can \nadd a test card\n to the Wallet app.\n2. Integrate paymentSDK into your application\n3. Conduct testing\n4. Add a live card to the Wallet app and switch the Elastic Engine instance to production mode (do not forget to use production credentials - \nMAID/SK/AppleMerchantID/csr\n)\n\n\nPayment Examples\n\u00b6\n\n\n\n\nFor Apple Pay, we recommend that you only use paymentSDK for the \npurchase\n & \nauthorization\n transaction types because of the inherent limitations of the mobile platform.\n\n\n\n\nThere are two approaches here, depending on your requirements:\n1. You need full control over \nPKPaymentRequest\n (dynamic shipping methods and pricing); use \nWDApplePayPayment\n\n2. If you only do simple transactions with a fixed shipping price, use \nWDApplePayManagedPayment\n, and paymentSDK will handle the \nPKPaymentRequest\n by itself\n\n\nAdditionally, you can find a list of merchant-server-to-Elastic-Engine REST request examples \nhere\n.\n\n\nUsing WDApplePayPayment\n\u00b6\n\n\n\n\nInitialize \nWDClient\n:\n\n\n\n\n-\n \n(\nvoid\n)\npaymentAuthorizationViewController:\n(\nPKPaymentAuthorizationViewController\n \n*\n)\ncontroller\n\n                       \ndidAuthorizePayment:\n(\nPKPayment\n \n*\n)\npayment\n\n                                \ncompletion:\n(\nvoid\n \n(\n^\n)(\nPKPaymentAuthorizationStatus\n \nstatus\n))\ncompletion\n\n\n{\n\n    \n// it is better to keep client as property to keep reference\n\n    \nWDClient\n \n*\nclient\n \n=\n \n[[\nWDClient\n \nalloc\n]\n \ninitWithEnvironment\n:\nWDEnvironmentTEST\n];",
            "title": "iOS"
        },
        {
            "location": "/iOS/#integration-on-ios",
            "text": "The device cannot be jail-broken and must run at least iOS 7 for paymentSDK to work. It is recommended to use the latest stable version of Xcode.",
            "title": "Integration on iOS"
        },
        {
            "location": "/iOS/#getting-paymentsdk",
            "text": "Download the pod at our  GitHub repository  and add it to your  Podfile :  pod   ' paymentSDK '",
            "title": "Getting paymentSDK"
        },
        {
            "location": "/iOS/#external-libraries",
            "text": "",
            "title": "External Libraries"
        },
        {
            "location": "/iOS/#code-examples",
            "text": "In this section, you will find code examples of basic transactions for each payment method.",
            "title": "Code Examples"
        },
        {
            "location": "/iOS/#apple-pay",
            "text": "",
            "title": "Apple Pay"
        },
        {
            "location": "/iOS/#before-you-start",
            "text": "We assume that you have access to your testing environment at this point.    Since Apple Pay is a proprietary service, the setup process is a bit more complicated.  For setup, you need to:   Contact our merchant support to  create a test Elastic Engine Apple Pay merchant account  and  set up its Apple Merchant ID .  Depending on whether you had an existing Apple Merchant ID, you will need to:  upload the CSR file you've received in the previous step,   register with the Apple Merchant ID provided from us, AND upload the CSR file   Additional information can be found in  Apple's own documentation .  After you've set up your accounts:\n1. You can  add a test card  to the Wallet app.\n2. Integrate paymentSDK into your application\n3. Conduct testing\n4. Add a live card to the Wallet app and switch the Elastic Engine instance to production mode (do not forget to use production credentials -  MAID/SK/AppleMerchantID/csr )",
            "title": "Before you start"
        },
        {
            "location": "/iOS/#payment-examples",
            "text": "For Apple Pay, we recommend that you only use paymentSDK for the  purchase  &  authorization  transaction types because of the inherent limitations of the mobile platform.   There are two approaches here, depending on your requirements:\n1. You need full control over  PKPaymentRequest  (dynamic shipping methods and pricing); use  WDApplePayPayment \n2. If you only do simple transactions with a fixed shipping price, use  WDApplePayManagedPayment , and paymentSDK will handle the  PKPaymentRequest  by itself  Additionally, you can find a list of merchant-server-to-Elastic-Engine REST request examples  here .",
            "title": "Payment Examples"
        },
        {
            "location": "/iOS/#using-wdapplepaypayment",
            "text": "Initialize  WDClient :   -   ( void ) paymentAuthorizationViewController: ( PKPaymentAuthorizationViewController   * ) controller \n                        didAuthorizePayment: ( PKPayment   * ) payment \n                                 completion: ( void   ( ^ )( PKPaymentAuthorizationStatus   status )) completion  { \n     // it is better to keep client as property to keep reference \n     WDClient   * client   =   [[ WDClient   alloc ]   initWithEnvironment : WDEnvironmentTEST ];",
            "title": "Using WDApplePayPayment"
        }
    ]
}